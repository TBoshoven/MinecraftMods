version: 2.1
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - run:
          name: Copying build.gradle for caching
          command: cp build.gradle build.gradle.original
      - run:
          name: Updating build number
          # Library version is MC version followed by tag name (or "MASTER" or "DEV") and build number.
          command: |
            if [[ $CIRCLE_TAG ]]; then
              sed -Ei 's/^(version = ")([0-9]+\.){2}[0-9]+-DEV\.0+"$/\1'$CIRCLE_TAG'.'$CIRCLE_BUILD_NUM'"/' build.gradle
            else
              [[ $CIRCLE_BRANCH = 'master' ]] && LIB_VERSION=MASTER || LIB_VERSION=DEV
              sed -Ei 's/^(version = "([0-9]+\.){2}[0-9]+-)DEV\.0+"$/\1'$LIB_VERSION'.'$CIRCLE_BUILD_NUM'"/' build.gradle
            fi
      - restore_cache:
          key: circleci-minecraft-mods-gradle-{{ checksum "build.gradle.original" }}
      - run:
          name: Building
          command: ./gradlew build
      - store_artifacts:
          path: build/libs
          destination: libs
      # Save the Gradle cache so we don't have to redownload things all the time
      - save_cache:
          paths:
            - ~/.gradle
          key: circleci-minecraft-mods-gradle-{{ checksum "build.gradle.original" }}
      - persist_to_workspace:
          root: build
          paths:
            - libs/*.jar
  release-github:
    docker:
      - image: gableroux/github-release:v1.0.2
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload assets to GitHub
          command: |
            for f in /tmp/workspace/libs/*.jar; do
              github-release upload -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" -t "$CIRCLE_TAG" -n "$(basename "$f")" -f "$f"
            done

workflows:
  version: 2
  build:
    jobs:
      - build
  build-release:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - release-github:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          context: GitHub Release
