version: 2.1
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - run:
          name: Copying build.gradle for caching
          command: cp build.gradle build.gradle.original
      - run:
          name: Updating build number
          # Library version is MC version followed by tag name (or "MASTER" or "DEV") and build number.
          command: |
            if [[ $CIRCLE_TAG ]]; then
              TAG_VERSION="$(echo "$CIRCLE_TAG" | sed -E 's/[^0-9]+//')"
              sed -Ei 's/^(\s*version = ")([0-9]+\.){2}[0-9]+-DEV\.0+"$/\1'$TAG_VERSION'.'$CIRCLE_BUILD_NUM'"/' build.gradle
            else
              [[ $CIRCLE_BRANCH = '1.15.2' ]] && LIB_VERSION=MASTER || LIB_VERSION=DEV
              sed -Ei 's/^(\s*version = "([0-9]+\.){2}[0-9]+-)DEV\.0+"$/\1'$LIB_VERSION'.'$CIRCLE_BUILD_NUM'"/' build.gradle
            fi
      - restore_cache:
          key: circleci-minecraft-mods-gradle-{{ checksum "build.gradle.original" }}
      - run:
          name: Data Generation
          # The runData command tends to stop the daemon unexpectedly, which causes error code 1
          # Apparently this is expected behavior so we just work around it.
          # We verify that the command ran by making sure the cache is present
          command: |
            for SUBPROJECT_BUILD in */build.gradle; do
              SUBPROJECT=$(dirname "$SUBPROJECT_BUILD")
              _JAVA_OPTIONS='-Xmx1G -Xms1G' ./gradlew "$SUBPROJECT":runData || true
              ls "$SUBPROJECT/src/generated/resources/.cache"
            done
      - run:
          name: Building
          command: |
            if [[ $CIRCLE_TAG ]]; then
              TAG_BUILD="$(echo "$CIRCLE_TAG" | sed -E 's/-[0-9.-]+$//' | sed -E 's/(^|-)([^-])/\U\2/g')"
              ./gradlew "$TAG_BUILD:build"
            else
              ./gradlew build
            fi
      - run:
          name: Collecting artifacts
          command: |
            mkdir -p build/libs
            cp */build/libs/*.jar build/libs
      - store_artifacts:
          path: build/libs
          destination: libs
      # Save the Gradle cache so we don't have to redownload things all the time
      - save_cache:
          paths:
            - ~/.gradle
          key: circleci-minecraft-mods-gradle-{{ checksum "build.gradle.original" }}
      - persist_to_workspace:
          root: build
          paths:
            - libs/*.jar
  release-github:
    docker:
      - image: tboshoven/ci:v1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload assets to GitHub
          command: |
            for f in /tmp/workspace/libs/*.jar; do
              github-release upload -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" -t "$CIRCLE_TAG" -n "$(basename "$f")" -f "$f" 2>/dev/null
            done
  release-curseforge:
    docker:
      - image: tboshoven/ci:v1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload assets to CurseForge
          command: |
            # Get release description
            DESCRIPTION="$(github-release info -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" -t "$CIRCLE_TAG" -j | jq -r .Releases[0].body)"

            # Construct URL and upload file
            TAG_BUILD="$(echo "$CIRCLE_TAG" | sed -E 's/-[0-9.-]+$//' | sed -E 's/(^|-)([^-])/\U\2/g')"
            TAG_VERSION="$(echo "$CIRCLE_TAG" | sed -E 's/[^0-9]+//')"
            PROJECT_ID="$(jq -r .projectId $TAG_BUILD/curseforge.json)"
            FILE="$(ls /tmp/workspace/libs/*.jar | head -n 1)"
            # Use the build number on the JAR to prevent confusion.
            ORIGINAL_BUILD_NUM="$(echo "$FILE" | sed -E 's/^.*\.([0-9]+)\.jar$/\1/')"
            METADATA="$(jq -n '{"changelog": $ARGS.positional[0], "changelogType": "markdown", "displayName": $ARGS.positional[1], "gameVersions": [7722, 7498, 4458], "releaseType": "release"}' --args "$DESCRIPTION" "v$TAG_VERSION.$ORIGINAL_BUILD_NUM")"
            curl -f -XPOST "https://minecraft.curseforge.com/api/projects/$PROJECT_ID/upload-file" -F "file=@$FILE" -F "metadata=$METADATA" -H "X-Api-Token: $CURSEFORGE_TOKEN"
  release-modrinth:
    docker:
      - image: tboshoven/ci:v1
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Upload assets to Modrinth
          command: |
            # Get release description
            DESCRIPTION="$(github-release info -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" -t "$CIRCLE_TAG" -j | jq -r .Releases[0].body)"

            # Construct URL and upload file
            TAG_BUILD="$(echo "$CIRCLE_TAG" | sed -E 's/-[0-9.-]+$//' | sed -E 's/(^|-)([^-])/\U\2/g')"
            TAG_VERSION="$(echo "$CIRCLE_TAG" | sed -E 's/[^0-9]+//')"
            PROJECT_ID="$(jq -r .projectId $TAG_BUILD/modrinth.json)"
            FILE="$(ls /tmp/workspace/libs/*.jar | head -n 1)"
            # Use the build number on the JAR to prevent confusion.
            ORIGINAL_BUILD_NUM="$(echo "$FILE" | sed -E 's/^.*\.([0-9]+)\.jar$/\1/')"
            DATA="$(jq -n '{"name": $ARGS.positional[1], "version_number": $ARGS.positional[2], "changelog": $ARGS.positional[0], "dependencies": [], "game_versions": ["1.15.2"], "version_type": "release", "loaders": ["forge"], "featured": true, "project_id": $ARGS.positional[3], "file_parts": ["file"]}' --args "$DESCRIPTION" "v$TAG_VERSION" "$TAG_VERSION.$ORIGINAL_BUILD_NUM" "$PROJECT_ID")"
            curl -XPOST -f 'https://api.modrinth.com/v2/version' -F "data=$DATA" -F "file=@$FILE" -H "Authorization: $MODRINTH_TOKEN" -H 'User-Agent: TBoshoven/MinecraftMods'
workflows:
  version: 2
  build:
    jobs:
      - build
  build-release:
    jobs:
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - release-github:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          context: GitHub Release
      - release-curseforge:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          context: CurseForge Release
      - release-modrinth:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
          context: Modrinth Release
